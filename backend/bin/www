#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-3:server');
var http = require('http');
var io = require('../public/javascripts/socket');
const cluster = require('cluster');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
if (cluster.isMaster) {
    console.log(`主进程 ${process.pid} 正在运行`);
    let numReqs = 0;
    // setInterval(() => {
    //   console.log(`numReqs = ${numReqs}`);
    // }, 1000);

    function messageHandler(msg) {
      if (msg.cmd && msg.cmd === 'notifyRequest') {
        numReqs += 1;
      }
    }
  
    const numCPUs = require('os').cpus().length;
    for (let i = 0; i < numCPUs; i++) {
      cluster.fork();
    }
  
    for (const id in cluster.workers) {
      cluster.workers[id].on('message', messageHandler);
    }
    
    cluster.on('exit',(worker)=>{
      console.log(`worker${worker.id} exit.`)
    });
    cluster.on('fork',(worker)=>{
        console.log(`fork：worker${worker.id}`)
    });

    cluster.on('disconnect',(worker)=>{
        console.log(`worker${worker.id} is disconnected.`)
    });
    cluster.on('listening',(worker,addr)=>{
        console.log(`worker${worker.id} listening on ${addr.address}:${addr.port}`)
    });
    cluster.on('online',(worker)=>{
        console.log(`worker${worker.id} is online now`)
    });

    cluster.on('message',(worker,msg)=>{
        console.log(`got the worker${worker.id}'s msg：${msg}`);
    });

    Object.keys(cluster.workers).forEach((id)=>{
        cluster.workers[id].send(`hello worker${id}`);
    })

  } else {
    process.on('message',(msg)=>{
      console.log('worker'+cluster.worker.id+' got the master msg：'+msg);
    });
    process.send('hello master, I am worker'+cluster.worker.id);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    io.getScoket(server)
    console.log(`工作进程 ${process.pid} 已启动`);
  }


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
